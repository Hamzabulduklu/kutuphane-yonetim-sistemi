import { expect } from 'chai';
import sinon from 'sinon';

/**
 * Temel Test Dosyasƒ±
 * K√ºt√ºphane Y√∂netim Sistemi i√ßin temel fonksiyonaliteleri test eder
 */

describe('üß™ Temel Testler', () => {
  
  /**
   * Matematik i≈ülemleri testi
   * Temel hesaplama fonksiyonlarƒ±nƒ±n doƒüru √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±nƒ± kontrol eder
   */
  it('‚úÖ Matematik i≈ülemleri doƒüru √ßalƒ±≈ümalƒ±', () => {
    // Toplama i≈ülemi testi
    expect(1 + 1).to.equal(2);
    
    // √áarpma i≈ülemi testi  
    expect(3 * 4).to.equal(12);
    
    // B√∂lme i≈ülemi testi
    expect(10 / 2).to.equal(5);
  });

  /**
   * Sinon.js Mock/Stub testi
   * Test framework'√ºn√ºn doƒüru √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±nƒ± kontrol eder
   */
  it('‚úÖ Sinon.js stub fonksiyonu √ßalƒ±≈ümalƒ±', () => {
    // Sahte (mock) fonksiyon olu≈ütur
    const mockFunction = sinon.stub();
    mockFunction.returns('test deƒüeri');
    
    // Fonksiyonu √ßaƒüƒ±r ve sonucu kontrol et
    const result = mockFunction();
    expect(result).to.equal('test deƒüeri');
    
    // Fonksiyonun bir kez √ßaƒürƒ±ldƒ±ƒüƒ±nƒ± doƒürula
    expect(mockFunction.calledOnce).to.be.true;
  });

  /**
   * ULID ID √ºretimi testi
   * Benzersiz kimlik √ºretim sisteminin √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±nƒ± kontrol eder
   */
  it('‚úÖ ULID kimlik √ºretimi √ßalƒ±≈ümalƒ±', () => {
    // ULID k√ºt√ºphanesini import et
    const { ulid } = require('ulid');
    
    // Yeni ULID olu≈ütur
    const id1 = ulid();
    const id2 = ulid();
    
    // ID'nin string olduƒüunu kontrol et
    expect(id1).to.be.a('string');
    expect(id2).to.be.a('string');
    
    // ULID'nin doƒüru uzunlukta olduƒüunu kontrol et (26 karakter)
    expect(id1.length).to.equal(26);
    expect(id2.length).to.equal(26);
    
    // ƒ∞ki farklƒ± ULID'nin farklƒ± olduƒüunu kontrol et
    expect(id1).to.not.equal(id2);
  });

  /**
   * String i≈ülemleri testi
   * Temel string manip√ºlasyon fonksiyonlarƒ±nƒ± test eder
   */
  it('‚úÖ String i≈ülemleri doƒüru √ßalƒ±≈ümalƒ±', () => {
    const testString = 'K√ºt√ºphane Y√∂netim Sistemi';
    
    // String uzunluƒüu
    expect(testString.length).to.be.greaterThan(0);
    
    // String i√ßerme kontrol√º
    expect(testString).to.include('K√ºt√ºphane');
    expect(testString).to.include('Sistem');
    
    // B√ºy√ºk/k√º√ß√ºk harf d√∂n√º≈ü√ºm√º
    expect(testString.toLowerCase()).to.include('k√ºt√ºphane');
    expect(testString.toUpperCase()).to.include('K√úT√úPHANE');
  });

  /**
   * Dizi (Array) i≈ülemleri testi
   * JavaScript dizi fonksiyonlarƒ±nƒ±n doƒüru √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±nƒ± kontrol eder
   */
  it('‚úÖ Dizi i≈ülemleri doƒüru √ßalƒ±≈ümalƒ±', () => {
    const books = ['Kitap 1', 'Kitap 2', 'Kitap 3'];
    
    // Dizi uzunluƒüu
    expect(books).to.have.lengthOf(3);
    
    // Dizi elementi i√ßerme kontrol√º
    expect(books).to.include('Kitap 1');
    expect(books).to.include('Kitap 2');
    
    // Yeni eleman ekleme
    books.push('Kitap 4');
    expect(books).to.have.lengthOf(4);
    expect(books).to.include('Kitap 4');
  });
});
